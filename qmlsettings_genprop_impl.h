// generated by parse_properties.py from AOG Settings.cs file
void QMLSettings::set_setwin(double &value) {
   ((QSettings *)settings)->setValue("display/camPitch", value);
   emit changed("display/camPitch");
}
double QMLSettings::get_setwin() {
   return settings->value(QString("display/camPitch"));
}
void QMLSettings::set_setWindow_Location(QPoint &value) {
   ((QSettings *)settings)->setValue("display/windowLocation", value);
   emit changed("display/windowLocation");
}
QPoint QMLSettings::get_setWindow_Location() {
   return settings->value(QString("display/windowLocation"));
}
void QMLSettings::set_setWindow_Size(QVariant &value) {
   ((QSettings *)settings)->setValue("display/windowSize", value);
   emit changed("display/windowSize");
}
QVariant QMLSettings::get_setWindow_Size() {
   return settings->value(QString("display/windowSize"));
}
void QMLSettings::set_setWindow_Maximized(bool &value) {
   ((QSettings *)settings)->setValue("display/maximized", value);
   emit changed("display/maximized");
}
bool QMLSettings::get_setWindow_Maximized() {
   return settings->value(QString("display/maximized"));
}
void QMLSettings::set_setWindow_Minimized(bool &value) {
   ((QSettings *)settings)->setValue("display/minimized", value);
   emit changed("display/minimized");
}
bool QMLSettings::get_setWindow_Minimized() {
   return settings->value(QString("display/minimized"));
}
void QMLSettings::set_setDisplay_triangleResolution(double &value) {
   ((QSettings *)settings)->setValue("display/triangleResolution", value);
   emit changed("display/triangleResolution");
}
double QMLSettings::get_setDisplay_triangleResolution() {
   return settings->value(QString("display/triangleResolution"));
}
void QMLSettings::set_setMenu_isMetric(bool &value) {
   ((QSettings *)settings)->setValue("display/isMetric", value);
   emit changed("display/isMetric");
}
bool QMLSettings::get_setMenu_isMetric() {
   return settings->value(QString("display/isMetric"));
}
void QMLSettings::set_setMenu_isGridOn(bool &value) {
   ((QSettings *)settings)->setValue("display/showGrid", value);
   emit changed("display/showGrid");
}
bool QMLSettings::get_setMenu_isGridOn() {
   return settings->value(QString("display/showGrid"));
}
void QMLSettings::set_setMenu_isLightbarOn(bool &value) {
   ((QSettings *)settings)->setValue("display/isLightBarOn", value);
   emit changed("display/isLightBarOn");
}
bool QMLSettings::get_setMenu_isLightbarOn() {
   return settings->value(QString("display/isLightBarOn"));
}
void QMLSettings::set_setF_CurrentDir(QString &value) {
   ((QSettings *)settings)->setValue("display/currentDir", value);
   emit changed("display/currentDir");
}
QString QMLSettings::get_setF_CurrentDir() {
   return settings->value(QString("display/currentDir"));
}
void QMLSettings::set_setF_isWorkSwitchEnabled(bool &value) {
   ((QSettings *)settings)->setValue("tool/isWorkSwitchEnabled", value);
   emit changed("tool/isWorkSwitchEnabled");
}
bool QMLSettings::get_setF_isWorkSwitchEnabled() {
   return settings->value(QString("tool/isWorkSwitchEnabled"));
}
void QMLSettings::set_setIMU_pitchZeroX16(int &value) {
   ((QSettings *)settings)->setValue("gps/IMUPitchZeroX16", value);
   emit changed("gps/IMUPitchZeroX16");
}
int QMLSettings::get_setIMU_pitchZeroX16() {
   return settings->value(QString("gps/IMUPitchZeroX16"));
}
void QMLSettings::set_setIMU_rollZero(double &value) {
   ((QSettings *)settings)->setValue("gps/IMURollZeroX16", value);
   emit changed("gps/IMURollZeroX16");
}
double QMLSettings::get_setIMU_rollZero() {
   return settings->value(QString("gps/IMURollZeroX16"));
}
void QMLSettings::set_setF_minHeadingStepDistance(double &value) {
   ((QSettings *)settings)->setValue("gps/minHeadingStepDistance", value);
   emit changed("gps/minHeadingStepDistance");
}
double QMLSettings::get_setF_minHeadingStepDistance() {
   return settings->value(QString("gps/minHeadingStepDistance"));
}
void QMLSettings::set_setAS_lowSteerPWM(char &value) {
   ((QSettings *)settings)->setValue("autosteer/lowSteerPWM", value);
   emit changed("autosteer/lowSteerPWM");
}
char QMLSettings::get_setAS_lowSteerPWM() {
   return settings->value(QString("autosteer/lowSteerPWM"));
}
void QMLSettings::set_setAS_wasOffset(int &value) {
   ((QSettings *)settings)->setValue("autosteer/wasOffset", value);
   emit changed("autosteer/wasOffset");
}
int QMLSettings::get_setAS_wasOffset() {
   return settings->value(QString("autosteer/wasOffset"));
}
void QMLSettings::set_setF_UserTotalArea(double &value) {
   ((QSettings *)settings)->setValue("display/userTotalArea", value);
   emit changed("display/userTotalArea");
}
double QMLSettings::get_setF_UserTotalArea() {
   return settings->value(QString("display/userTotalArea"));
}
void QMLSettings::set_setAS_minSteerPWM(char &value) {
   ((QSettings *)settings)->setValue("autosteer/minSteerPWM", value);
   emit changed("autosteer/minSteerPWM");
}
char QMLSettings::get_setAS_minSteerPWM() {
   return settings->value(QString("autosteer/minSteerPWM"));
}
void QMLSettings::set_setF_boundaryTriggerDistance(double &value) {
   ((QSettings *)settings)->setValue("autosteer/boundaryTriggerDistance", value);
   emit changed("autosteer/boundaryTriggerDistance");
}
double QMLSettings::get_setF_boundaryTriggerDistance() {
   return settings->value(QString("autosteer/boundaryTriggerDistance"));
}
void QMLSettings::set_setAS_highSteerPWM(char &value) {
   ((QSettings *)settings)->setValue("autosteer/highSteerPWM", value);
   emit changed("autosteer/highSteerPWM");
}
char QMLSettings::get_setAS_highSteerPWM() {
   return settings->value(QString("autosteer/highSteerPWM"));
}
void QMLSettings::set_setMenu_isSideGuideLines(bool &value) {
   ((QSettings *)settings)->setValue("display/isSideGuideLines", value);
   emit changed("display/isSideGuideLines");
}
bool QMLSettings::get_setMenu_isSideGuideLines() {
   return settings->value(QString("display/isSideGuideLines"));
}
void QMLSettings::set_setAS_countsPerDegree(char &value) {
   ((QSettings *)settings)->setValue("autosteer/countsPerDegree", value);
   emit changed("autosteer/countsPerDegree");
}
char QMLSettings::get_setAS_countsPerDegree() {
   return settings->value(QString("autosteer/countsPerDegree"));
}
void QMLSettings::set_setMenu_isPureOn(bool &value) {
   ((QSettings *)settings)->setValue("display/isPureOn", value);
   emit changed("display/isPureOn");
}
bool QMLSettings::get_setMenu_isPureOn() {
   return settings->value(QString("display/isPureOn"));
}
void QMLSettings::set_setMenu_isSimulatorOn(bool &value) {
   ((QSettings *)settings)->setValue("sim/on", value);
   emit changed("sim/on");
}
bool QMLSettings::get_setMenu_isSimulatorOn() {
   return settings->value(QString("sim/on"));
}
void QMLSettings::set_setMenu_isSkyOn(bool &value) {
   ((QSettings *)settings)->setValue("display/isSkyOn", value);
   emit changed("display/isSkyOn");
}
bool QMLSettings::get_setMenu_isSkyOn() {
   return settings->value(QString("display/isSkyOn"));
}
void QMLSettings::set_setF_culture(QString &value) {
   ((QSettings *)settings)->setValue("display/culture", value);
   emit changed("display/culture");
}
QString QMLSettings::get_setF_culture() {
   return settings->value(QString("display/culture"));
}
void QMLSettings::set_setF_workingDirectory(QString &value) {
   ((QSettings *)settings)->setValue("display/workingDir", value);
   emit changed("display/workingDir");
}
QString QMLSettings::get_setF_workingDirectory() {
   return settings->value(QString("display/workingDir"));
}
void QMLSettings::set_setDisplay_lightbarCmPerPixel(int &value) {
   ((QSettings *)settings)->setValue("display/lightbarCMPerPixel", value);
   emit changed("display/lightbarCMPerPixel");
}
int QMLSettings::get_setDisplay_lightbarCmPerPixel() {
   return settings->value(QString("display/lightbarCMPerPixel"));
}
void QMLSettings::set_setGPS_fixFromWhichSentence(QString &value) {
   ((QSettings *)settings)->setValue("gps/fixFromWhichSentence", value);
   emit changed("gps/fixFromWhichSentence");
}
QString QMLSettings::get_setGPS_fixFromWhichSentence() {
   return settings->value(QString("gps/fixFromWhichSentence"));
}
void QMLSettings::set_setGPS_headingFromWhichSource(QString &value) {
   ((QSettings *)settings)->setValue("gps/headingFromWhichSource", value);
   emit changed("gps/headingFromWhichSource");
}
QString QMLSettings::get_setGPS_headingFromWhichSource() {
   return settings->value(QString("gps/headingFromWhichSource"));
}
void QMLSettings::set_setGPS_SimLatitude(double &value) {
   ((QSettings *)settings)->setValue("sim/latitude", value);
   emit changed("sim/latitude");
}
double QMLSettings::get_setGPS_SimLatitude() {
   return settings->value(QString("sim/latitude"));
}
void QMLSettings::set_setGPS_SimLongitude(double &value) {
   ((QSettings *)settings)->setValue("sim/longitude", value);
   emit changed("sim/longitude");
}
double QMLSettings::get_setGPS_SimLongitude() {
   return settings->value(QString("sim/longitude"));
}
void QMLSettings::set_setAS_snapDistance(double &value) {
   ((QSettings *)settings)->setValue("autosteer/snapDistance", value);
   emit changed("autosteer/snapDistance");
}
double QMLSettings::get_setAS_snapDistance() {
   return settings->value(QString("autosteer/snapDistance"));
}
void QMLSettings::set_setF_isWorkSwitchManualSections(bool &value) {
   ((QSettings *)settings)->setValue("tool/isWorkSwitchManual", value);
   emit changed("tool/isWorkSwitchManual");
}
bool QMLSettings::get_setF_isWorkSwitchManualSections() {
   return settings->value(QString("tool/isWorkSwitchManual"));
}
void QMLSettings::set_setAS_isAutoSteerAutoOn(bool &value) {
   ((QSettings *)settings)->setValue("autosteer/autoOn", value);
   emit changed("autosteer/autoOn");
}
bool QMLSettings::get_setAS_isAutoSteerAutoOn() {
   return settings->value(QString("autosteer/autoOn"));
}
void QMLSettings::set_setDisplay_lineWidth(int &value) {
   ((QSettings *)settings)->setValue("display/lineWidth", value);
   emit changed("display/lineWidth");
}
int QMLSettings::get_setDisplay_lineWidth() {
   return settings->value(QString("display/lineWidth"));
}
void QMLSettings::set_setDisplay_panelSimLocation(QPoint &value) {
   ((QSettings *)settings)->setValue("display/simLocation", value);
   emit changed("display/simLocation");
}
QPoint QMLSettings::get_setDisplay_panelSimLocation() {
   return settings->value(QString("display/simLocation"));
}
void QMLSettings::set_setTram_tramWidth(double &value) {
   ((QSettings *)settings)->setValue("tram/width", value);
   emit changed("tram/width");
}
double QMLSettings::get_setTram_tramWidth() {
   return settings->value(QString("tram/width"));
}
void QMLSettings::set_setTram_snapAdj(double &value) {
   ((QSettings *)settings)->setValue("tram/swapAdj", value);
   emit changed("tram/swapAdj");
}
double QMLSettings::get_setTram_snapAdj() {
   return settings->value(QString("tram/swapAdj"));
}
void QMLSettings::set_setTram_passes(int &value) {
   ((QSettings *)settings)->setValue("tram/passes", value);
   emit changed("tram/passes");
}
int QMLSettings::get_setTram_passes() {
   return settings->value(QString("tram/passes"));
}
void QMLSettings::set_setTram_offset(double &value) {
   ((QSettings *)settings)->setValue("tram/offset", value);
   emit changed("tram/offset");
}
double QMLSettings::get_setTram_offset() {
   return settings->value(QString("tram/offset"));
}
void QMLSettings::set_setMenu_isOGLZoomOn(int &value) {
   ((QSettings *)settings)->setValue("display/oglZoom", value);
   emit changed("display/oglZoom");
}
int QMLSettings::get_setMenu_isOGLZoomOn() {
   return settings->value(QString("display/oglZoom"));
}
void QMLSettings::set_setMenu_isCompassOn(bool &value) {
   ((QSettings *)settings)->setValue("display/isCompassOn", value);
   emit changed("display/isCompassOn");
}
bool QMLSettings::get_setMenu_isCompassOn() {
   return settings->value(QString("display/isCompassOn"));
}
void QMLSettings::set_setMenu_isSpeedoOn(bool &value) {
   ((QSettings *)settings)->setValue("display/isSpeedOn", value);
   emit changed("display/isSpeedOn");
}
bool QMLSettings::get_setMenu_isSpeedoOn() {
   return settings->value(QString("display/isSpeedOn"));
}
void QMLSettings::set_setDisplay_colorDayFrame(QColor &value) {
   ((QSettings *)settings)->setValue("display/colorDayFrame", value);
   emit changed("display/colorDayFrame");
}
QColor QMLSettings::get_setDisplay_colorDayFrame() {
   return settings->value(QString("display/colorDayFrame"));
}
void QMLSettings::set_setDisplay_colorNightFrame(QColor &value) {
   ((QSettings *)settings)->setValue("display/colorNightFrame", value);
   emit changed("display/colorNightFrame");
}
QColor QMLSettings::get_setDisplay_colorNightFrame() {
   return settings->value(QString("display/colorNightFrame"));
}
void QMLSettings::set_setDisplay_colorSectionsDay(QColor &value) {
   ((QSettings *)settings)->setValue("display/colorSectionsDay", value);
   emit changed("display/colorSectionsDay");
}
QColor QMLSettings::get_setDisplay_colorSectionsDay() {
   return settings->value(QString("display/colorSectionsDay"));
}
void QMLSettings::set_setDisplay_colorFieldDay(QColor &value) {
   ((QSettings *)settings)->setValue("display/colorFieldDay", value);
   emit changed("display/colorFieldDay");
}
QColor QMLSettings::get_setDisplay_colorFieldDay() {
   return settings->value(QString("display/colorFieldDay"));
}
void QMLSettings::set_setDisplay_isDayMode(bool &value) {
   ((QSettings *)settings)->setValue("display,dayMode", value);
   emit changed("display,dayMode");
}
bool QMLSettings::get_setDisplay_isDayMode() {
   return settings->value(QString("display,dayMode"));
}
void QMLSettings::set_setDisplay_colorSectionsNight(QColor &value) {
   ((QSettings *)settings)->setValue("display/colorSectionsNight", value);
   emit changed("display/colorSectionsNight");
}
QColor QMLSettings::get_setDisplay_colorSectionsNight() {
   return settings->value(QString("display/colorSectionsNight"));
}
void QMLSettings::set_setDisplay_colorFieldNight(QColor &value) {
   ((QSettings *)settings)->setValue("display/colorFieldNight", value);
   emit changed("display/colorFieldNight");
}
QColor QMLSettings::get_setDisplay_colorFieldNight() {
   return settings->value(QString("display/colorFieldNight"));
}
void QMLSettings::set_setDisplay_isAutoDayNight(bool &value) {
   ((QSettings *)settings)->setValue("display/autoDayNight", value);
   emit changed("display/autoDayNight");
}
bool QMLSettings::get_setDisplay_isAutoDayNight() {
   return settings->value(QString("display/autoDayNight"));
}
void QMLSettings::set_setDisplay_customColors(QString &value) {
   ((QSettings *)settings)->setValue("display/customColors", value);
   emit changed("display/customColors");
}
QString QMLSettings::get_setDisplay_customColors() {
   return settings->value(QString("display/customColors"));
}
void QMLSettings::set_setDisplay_isTermsAccepted(bool &value) {
   ((QSettings *)settings)->setValue("display/terms", value);
   emit changed("display/terms");
}
bool QMLSettings::get_setDisplay_isTermsAccepted() {
   return settings->value(QString("display/terms"));
}
void QMLSettings::set_setGPS_isRTK(bool &value) {
   ((QSettings *)settings)->setValue("gps/isRTK", value);
   emit changed("gps/isRTK");
}
bool QMLSettings::get_setGPS_isRTK() {
   return settings->value(QString("gps/isRTK"));
}
void QMLSettings::set_setDisplay_isStartFullScreen(bool &value) {
   ((QSettings *)settings)->setValue("display/startFullscreen", value);
   emit changed("display/startFullscreen");
}
bool QMLSettings::get_setDisplay_isStartFullScreen() {
   return settings->value(QString("display/startFullscreen"));
}
void QMLSettings::set_setDisplay_isKeyboardOn(bool &value) {
   ((QSettings *)settings)->setValue("display/keyboard", value);
   emit changed("display/keyboard");
}
bool QMLSettings::get_setDisplay_isKeyboardOn() {
   return settings->value(QString("display/keyboard"));
}
void QMLSettings::set_setIMU_rollFilter(double &value) {
   ((QSettings *)settings)->setValue("gps/IMURollFilter", value);
   emit changed("gps/IMURollFilter");
}
double QMLSettings::get_setIMU_rollFilter() {
   return settings->value(QString("gps/IMURollFilter"));
}
void QMLSettings::set_setAS_uTurnSmoothing(int &value) {
   ((QSettings *)settings)->setValue("autosteer/uTurnSmoothing", value);
   emit changed("autosteer/uTurnSmoothing");
}
int QMLSettings::get_setAS_uTurnSmoothing() {
   return settings->value(QString("autosteer/uTurnSmoothing"));
}
void QMLSettings::set_setIMU_invertRoll(bool &value) {
   ((QSettings *)settings)->setValue("gps/IMUInvertRoll", value);
   emit changed("gps/IMUInvertRoll");
}
bool QMLSettings::get_setIMU_invertRoll() {
   return settings->value(QString("gps/IMUInvertRoll"));
}
void QMLSettings::set_setAS_ackerman(char &value) {
   ((QSettings *)settings)->setValue("autosteer/ackerman", value);
   emit changed("autosteer/ackerman");
}
char QMLSettings::get_setAS_ackerman() {
   return settings->value(QString("autosteer/ackerman"));
}
void QMLSettings::set_setF_isWorkSwitchActiveLow(bool &value) {
   ((QSettings *)settings)->setValue("tool/isWorkSwitchActiveLow", value);
   emit changed("tool/isWorkSwitchActiveLow");
}
bool QMLSettings::get_setF_isWorkSwitchActiveLow() {
   return settings->value(QString("tool/isWorkSwitchActiveLow"));
}
void QMLSettings::set_setAS_Kp(char &value) {
   ((QSettings *)settings)->setValue("autosteer/Kp", value);
   emit changed("autosteer/Kp");
}
char QMLSettings::get_setAS_Kp() {
   return settings->value(QString("autosteer/Kp"));
}
void QMLSettings::set_setSound_isUturnOn(bool &value) {
   ((QSettings *)settings)->setValue("display/soundUturn", value);
   emit changed("display/soundUturn");
}
bool QMLSettings::get_setSound_isUturnOn() {
   return settings->value(QString("display/soundUturn"));
}
void QMLSettings::set_setSound_isHydLiftOn(bool &value) {
   ((QSettings *)settings)->setValue("display/soundHydLift", value);
   emit changed("display/soundHydLift");
}
bool QMLSettings::get_setSound_isHydLiftOn() {
   return settings->value(QString("display/soundHydLift"));
}
void QMLSettings::set_setDisplay_colorTextNight(QColor &value) {
   ((QSettings *)settings)->setValue("display/colorTextNight", value);
   emit changed("display/colorTextNight");
}
QColor QMLSettings::get_setDisplay_colorTextNight() {
   return settings->value(QString("display/colorTextNight"));
}
void QMLSettings::set_setDisplay_colorTextDay(QColor &value) {
   ((QSettings *)settings)->setValue("display/colorTextDay", value);
   emit changed("display/colorTextDay");
}
QColor QMLSettings::get_setDisplay_colorTextDay() {
   return settings->value(QString("display/colorTextDay"));
}
void QMLSettings::set_setTram_isTramOnBackBuffer(bool &value) {
   ((QSettings *)settings)->setValue("tram/tramOnBackBuffer", value);
   emit changed("tram/tramOnBackBuffer");
}
bool QMLSettings::get_setTram_isTramOnBackBuffer() {
   return settings->value(QString("tram/tramOnBackBuffer"));
}
void QMLSettings::set_setDisplay_camZoom(double &value) {
   ((QSettings *)settings)->setValue("display/camZoom", value);
   emit changed("display/camZoom");
}
double QMLSettings::get_setDisplay_camZoom() {
   return settings->value(QString("display/camZoom"));
}
void QMLSettings::set_setDisplay_colorVehicle(QColor &value) {
   ((QSettings *)settings)->setValue("display/vehicleColor", value);
   emit changed("display/vehicleColor");
}
QColor QMLSettings::get_setDisplay_colorVehicle() {
   return settings->value(QString("display/vehicleColor"));
}
void QMLSettings::set_setDisplay_vehicleOpacity(int &value) {
   ((QSettings *)settings)->setValue("display/vehicleOpacity", value);
   emit changed("display/vehicleOpacity");
}
int QMLSettings::get_setDisplay_vehicleOpacity() {
   return settings->value(QString("display/vehicleOpacity"));
}
void QMLSettings::set_setDisplay_isVehicleImage(bool &value) {
   ((QSettings *)settings)->setValue("display/isVehicleImage", value);
   emit changed("display/isVehicleImage");
}
bool QMLSettings::get_setDisplay_isVehicleImage() {
   return settings->value(QString("display/isVehicleImage"));
}
void QMLSettings::set_setIMU_isHeadingCorrectionFromAutoSteer(QString &value) {
   ((QSettings *)settings)->setValue("gps/isHeadingCorrectionFromAutoSteer", value);
   emit changed("gps/isHeadingCorrectionFromAutoSteer");
}
QString QMLSettings::get_setIMU_isHeadingCorrectionFromAutoSteer() {
   return settings->value(QString("gps/isHeadingCorrectionFromAutoSteer"));
}
void QMLSettings::set_setDisplay_isTextureOn(bool &value) {
   ((QSettings *)settings)->setValue("display/texture", value);
   emit changed("display/texture");
}
bool QMLSettings::get_setDisplay_isTextureOn() {
   return settings->value(QString("display/texture"));
}
void QMLSettings::set_setAB_lineLength(double &value) {
   ((QSettings *)settings)->setValue("ABLine/lineLength", value);
   emit changed("ABLine/lineLength");
}
double QMLSettings::get_setAB_lineLength() {
   return settings->value(QString("ABLine/lineLength"));
}
void QMLSettings::set_SetGPS_udpWatchMsec(int &value) {
   ((QSettings *)settings)->setValue("gps/udpWatchMS", value);
   emit changed("gps/udpWatchMS");
}
int QMLSettings::get_SetGPS_udpWatchMsec() {
   return settings->value(QString("gps/udpWatchMS"));
}
void QMLSettings::set_setF_isSteerWorkSwitchManualSections(bool &value) {
   ((QSettings *)settings)->setValue("tool/isWorkSwitchManualSections", value);
   emit changed("tool/isWorkSwitchManualSections");
}
bool QMLSettings::get_setF_isSteerWorkSwitchManualSections() {
   return settings->value(QString("tool/isWorkSwitchManualSections"));
}
void QMLSettings::set_setAS_isConstantContourOn(bool &value) {
   ((QSettings *)settings)->setValue("autosteer/constantContourOn", value);
   emit changed("autosteer/constantContourOn");
}
bool QMLSettings::get_setAS_isConstantContourOn() {
   return settings->value(QString("autosteer/constantContourOn"));
}
void QMLSettings::set_setAS_guidanceLookAheadTime(double &value) {
   ((QSettings *)settings)->setValue("autosteer/guidanceLookAheadTime", value);
   emit changed("autosteer/guidanceLookAheadTime");
}
double QMLSettings::get_setAS_guidanceLookAheadTime() {
   return settings->value(QString("autosteer/guidanceLookAheadTime"));
}
void QMLSettings::set_setFeatures(QString &value) {
   ((QSettings *)settings)->setValue("display/features", value);
   emit changed("display/features");
}
QString QMLSettings::get_setFeatures() {
   return settings->value(QString("display/features"));
}
void QMLSettings::set_setIMU_isDualAsIMU(bool &value) {
   ((QSettings *)settings)->setValue("gps/dualAsIMU", value);
   emit changed("gps/dualAsIMU");
}
bool QMLSettings::get_setIMU_isDualAsIMU() {
   return settings->value(QString("gps/dualAsIMU"));
}
void QMLSettings::set_setAS_sideHillComp(double &value) {
   ((QSettings *)settings)->setValue("gps/sideHillCompensation", value);
   emit changed("gps/sideHillCompensation");
}
double QMLSettings::get_setAS_sideHillComp() {
   return settings->value(QString("gps/sideHillCompensation"));
}
void QMLSettings::set_setIMU_isReverseOn(bool &value) {
   ((QSettings *)settings)->setValue("gps/revereOn", value);
   emit changed("gps/revereOn");
}
bool QMLSettings::get_setIMU_isReverseOn() {
   return settings->value(QString("gps/revereOn"));
}
void QMLSettings::set_setGPS_forwardComp(double &value) {
   ((QSettings *)settings)->setValue("gps/forwardComp", value);
   emit changed("gps/forwardComp");
}
double QMLSettings::get_setGPS_forwardComp() {
   return settings->value(QString("gps/forwardComp"));
}
void QMLSettings::set_setGPS_reverseComp(double &value) {
   ((QSettings *)settings)->setValue("gps/reverseComp", value);
   emit changed("gps/reverseComp");
}
double QMLSettings::get_setGPS_reverseComp() {
   return settings->value(QString("gps/reverseComp"));
}
void QMLSettings::set_setGPS_ageAlarm(int &value) {
   ((QSettings *)settings)->setValue("gps/ageAlarm", value);
   emit changed("gps/ageAlarm");
}
int QMLSettings::get_setGPS_ageAlarm() {
   return settings->value(QString("gps/ageAlarm"));
}
void QMLSettings::set_setGPS_isRTK_KillAutoSteer(bool &value) {
   ((QSettings *)settings)->setValue("gps/RTKKillAutoSteer", value);
   emit changed("gps/RTKKillAutoSteer");
}
bool QMLSettings::get_setGPS_isRTK_KillAutoSteer() {
   return settings->value(QString("gps/RTKKillAutoSteer"));
}
void QMLSettings::set_setColor_sec01(QColor &value) {
   ((QSettings *)settings)->setValue("display/section1Color", value);
   emit changed("display/section1Color");
}
QColor QMLSettings::get_setColor_sec01() {
   return settings->value(QString("display/section1Color"));
}
void QMLSettings::set_setColor_sec02(QColor &value) {
   ((QSettings *)settings)->setValue("display/section2Color", value);
   emit changed("display/section2Color");
}
QColor QMLSettings::get_setColor_sec02() {
   return settings->value(QString("display/section2Color"));
}
void QMLSettings::set_setColor_sec03(QColor &value) {
   ((QSettings *)settings)->setValue("display/section3Color", value);
   emit changed("display/section3Color");
}
QColor QMLSettings::get_setColor_sec03() {
   return settings->value(QString("display/section3Color"));
}
void QMLSettings::set_setColor_sec04(QColor &value) {
   ((QSettings *)settings)->setValue("display/section4Color", value);
   emit changed("display/section4Color");
}
QColor QMLSettings::get_setColor_sec04() {
   return settings->value(QString("display/section4Color"));
}
void QMLSettings::set_setColor_sec05(QColor &value) {
   ((QSettings *)settings)->setValue("display/section5Color", value);
   emit changed("display/section5Color");
}
QColor QMLSettings::get_setColor_sec05() {
   return settings->value(QString("display/section5Color"));
}
void QMLSettings::set_setColor_sec06(QColor &value) {
   ((QSettings *)settings)->setValue("display/section6Color", value);
   emit changed("display/section6Color");
}
QColor QMLSettings::get_setColor_sec06() {
   return settings->value(QString("display/section6Color"));
}
void QMLSettings::set_setColor_sec07(QColor &value) {
   ((QSettings *)settings)->setValue("display/section7Color", value);
   emit changed("display/section7Color");
}
QColor QMLSettings::get_setColor_sec07() {
   return settings->value(QString("display/section7Color"));
}
void QMLSettings::set_setColor_sec08(QColor &value) {
   ((QSettings *)settings)->setValue("display/section8Color", value);
   emit changed("display/section8Color");
}
QColor QMLSettings::get_setColor_sec08() {
   return settings->value(QString("display/section8Color"));
}
void QMLSettings::set_setColor_sec09(QColor &value) {
   ((QSettings *)settings)->setValue("display/section9Color", value);
   emit changed("display/section9Color");
}
QColor QMLSettings::get_setColor_sec09() {
   return settings->value(QString("display/section9Color"));
}
void QMLSettings::set_setColor_sec10(QColor &value) {
   ((QSettings *)settings)->setValue("display/section10Color", value);
   emit changed("display/section10Color");
}
QColor QMLSettings::get_setColor_sec10() {
   return settings->value(QString("display/section10Color"));
}
void QMLSettings::set_setColor_sec11(QColor &value) {
   ((QSettings *)settings)->setValue("display/section11Color", value);
   emit changed("display/section11Color");
}
QColor QMLSettings::get_setColor_sec11() {
   return settings->value(QString("display/section11Color"));
}
void QMLSettings::set_setColor_sec12(QColor &value) {
   ((QSettings *)settings)->setValue("display/section12Color", value);
   emit changed("display/section12Color");
}
QColor QMLSettings::get_setColor_sec12() {
   return settings->value(QString("display/section12Color"));
}
void QMLSettings::set_setColor_sec13(QColor &value) {
   ((QSettings *)settings)->setValue("display/section13Color", value);
   emit changed("display/section13Color");
}
QColor QMLSettings::get_setColor_sec13() {
   return settings->value(QString("display/section13Color"));
}
void QMLSettings::set_setColor_sec14(QColor &value) {
   ((QSettings *)settings)->setValue("display/section14Color", value);
   emit changed("display/section14Color");
}
QColor QMLSettings::get_setColor_sec14() {
   return settings->value(QString("display/section14Color"));
}
void QMLSettings::set_setColor_sec15(QColor &value) {
   ((QSettings *)settings)->setValue("display/section15Color", value);
   emit changed("display/section15Color");
}
QColor QMLSettings::get_setColor_sec15() {
   return settings->value(QString("display/section15Color"));
}
void QMLSettings::set_setColor_sec16(QColor &value) {
   ((QSettings *)settings)->setValue("display/section16Color", value);
   emit changed("display/section16Color");
}
QColor QMLSettings::get_setColor_sec16() {
   return settings->value(QString("display/section16Color"));
}
void QMLSettings::set_setColor_isMultiColorSections(bool &value) {
   ((QSettings *)settings)->setValue("display/multiColorSections", value);
   emit changed("display/multiColorSections");
}
bool QMLSettings::get_setColor_isMultiColorSections() {
   return settings->value(QString("display/multiColorSections"));
}
void QMLSettings::set_setDisplay_customSectionColors(QString &value) {
   ((QSettings *)settings)->setValue("display/customSectionColors", value);
   emit changed("display/customSectionColors");
}
QString QMLSettings::get_setDisplay_customSectionColors() {
   return settings->value(QString("display/customSectionColors"));
}
void QMLSettings::set_setBrand_TBrand(QString &value) {
   ((QSettings *)settings)->setValue("display/TBrand", value);
   emit changed("display/TBrand");
}
QString QMLSettings::get_setBrand_TBrand() {
   return settings->value(QString("display/TBrand"));
}
void QMLSettings::set_setHeadland_isSectionControlled(bool &value) {
   ((QSettings *)settings)->setValue("todo/headlandIsSectionControlled", value);
   emit changed("todo/headlandIsSectionControlled");
}
bool QMLSettings::get_setHeadland_isSectionControlled() {
   return settings->value(QString("todo/headlandIsSectionControlled"));
}
void QMLSettings::set_setSound_isAutoSteerOn(bool &value) {
   ((QSettings *)settings)->setValue("display/autoSteerSound", value);
   emit changed("display/autoSteerSound");
}
bool QMLSettings::get_setSound_isAutoSteerOn() {
   return settings->value(QString("display/autoSteerSound"));
}
void QMLSettings::set_setRelay_pinConfig(QVector<int> &value) {
   ((QSettings *)settings)->setValue("todo/relayPinConfig", value);
   emit changed("todo/relayPinConfig");
}
QVector<int> QMLSettings::get_setRelay_pinConfig() {
   return settings->value(QString("todo/relayPinConfig"));
}
void QMLSettings::set_setDisplay_camSmooth(int &value) {
   ((QSettings *)settings)->setValue("display/camSmooth", value);
   emit changed("display/camSmooth");
}
int QMLSettings::get_setDisplay_camSmooth() {
   return settings->value(QString("display/camSmooth"));
}
void QMLSettings::set_setGPS_dualHeadingOffset(double &value) {
   ((QSettings *)settings)->setValue("gps/dualHeadingOffset", value);
   emit changed("gps/dualHeadingOffset");
}
double QMLSettings::get_setGPS_dualHeadingOffset() {
   return settings->value(QString("gps/dualHeadingOffset"));
}
void QMLSettings::set_setF_isSteerWorkSwitchEnabled(bool &value) {
   ((QSettings *)settings)->setValue("tool/isSteerWorkSwitchEnabled", value);
   emit changed("tool/isSteerWorkSwitchEnabled");
}
bool QMLSettings::get_setF_isSteerWorkSwitchEnabled() {
   return settings->value(QString("tool/isSteerWorkSwitchEnabled"));
}
void QMLSettings::set_setF_isRemoteWorkSystemOn(bool &value) {
   ((QSettings *)settings)->setValue("tool/isRemoteWorkSystemOn", value);
   emit changed("tool/isRemoteWorkSystemOn");
}
bool QMLSettings::get_setF_isRemoteWorkSystemOn() {
   return settings->value(QString("tool/isRemoteWorkSystemOn"));
}
void QMLSettings::set_setDisplay_isAutoStartAgIO(bool &value) {
   ((QSettings *)settings)->setValue("display/autoStartAgIO", value);
   emit changed("display/autoStartAgIO");
}
bool QMLSettings::get_setDisplay_isAutoStartAgIO() {
   return settings->value(QString("display/autoStartAgIO"));
}
void QMLSettings::set_setAS_ModeXTE(double &value) {
   ((QSettings *)settings)->setValue("autosteer/modeXTE", value);
   emit changed("autosteer/modeXTE");
}
double QMLSettings::get_setAS_ModeXTE() {
   return settings->value(QString("autosteer/modeXTE"));
}
void QMLSettings::set_setAS_ModeTime(int &value) {
   ((QSettings *)settings)->setValue("autosteer/modeTime", value);
   emit changed("autosteer/modeTime");
}
int QMLSettings::get_setAS_ModeTime() {
   return settings->value(QString("autosteer/modeTime"));
}
void QMLSettings::set_setVehicle_toolWidth(double &value) {
   ((QSettings *)settings)->setValue("tool/width", value);
   emit changed("tool/width");
}
double QMLSettings::get_setVehicle_toolWidth() {
   return settings->value(QString("tool/width"));
}
void QMLSettings::set_setVehicle_toolOverlap(double &value) {
   ((QSettings *)settings)->setValue("tool/overlap", value);
   emit changed("tool/overlap");
}
double QMLSettings::get_setVehicle_toolOverlap() {
   return settings->value(QString("tool/overlap"));
}
void QMLSettings::set_setTool_toolTrailingHitchLength(double &value) {
   ((QSettings *)settings)->setValue("tool/trailingHitchLength", value);
   emit changed("tool/trailingHitchLength");
}
double QMLSettings::get_setTool_toolTrailingHitchLength() {
   return settings->value(QString("tool/trailingHitchLength"));
}
void QMLSettings::set_setVehicle_numSections(int &value) {
   ((QSettings *)settings)->setValue("tool/numSections", value);
   emit changed("tool/numSections");
}
int QMLSettings::get_setVehicle_numSections() {
   return settings->value(QString("tool/numSections"));
}
void QMLSettings::set_setSection_position1(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition1", value);
   emit changed("tool/sectionpoition1");
}
QVariant QMLSettings::get_setSection_position1() {
   return settings->value(QString("tool/sectionpoition1"));
}
void QMLSettings::set_setSection_position2(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition2", value);
   emit changed("tool/sectionpoition2");
}
QVariant QMLSettings::get_setSection_position2() {
   return settings->value(QString("tool/sectionpoition2"));
}
void QMLSettings::set_setSection_position3(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition3", value);
   emit changed("tool/sectionpoition3");
}
QVariant QMLSettings::get_setSection_position3() {
   return settings->value(QString("tool/sectionpoition3"));
}
void QMLSettings::set_setSection_position4(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition4", value);
   emit changed("tool/sectionpoition4");
}
QVariant QMLSettings::get_setSection_position4() {
   return settings->value(QString("tool/sectionpoition4"));
}
void QMLSettings::set_setSection_position5(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition5", value);
   emit changed("tool/sectionpoition5");
}
QVariant QMLSettings::get_setSection_position5() {
   return settings->value(QString("tool/sectionpoition5"));
}
void QMLSettings::set_setSection_position6(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition6", value);
   emit changed("tool/sectionpoition6");
}
QVariant QMLSettings::get_setSection_position6() {
   return settings->value(QString("tool/sectionpoition6"));
}
void QMLSettings::set_setSection_position7(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition7", value);
   emit changed("tool/sectionpoition7");
}
QVariant QMLSettings::get_setSection_position7() {
   return settings->value(QString("tool/sectionpoition7"));
}
void QMLSettings::set_setSection_position8(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition8", value);
   emit changed("tool/sectionpoition8");
}
QVariant QMLSettings::get_setSection_position8() {
   return settings->value(QString("tool/sectionpoition8"));
}
void QMLSettings::set_setSection_position9(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition9", value);
   emit changed("tool/sectionpoition9");
}
QVariant QMLSettings::get_setSection_position9() {
   return settings->value(QString("tool/sectionpoition9"));
}
void QMLSettings::set_setSection_position10(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition10", value);
   emit changed("tool/sectionpoition10");
}
QVariant QMLSettings::get_setSection_position10() {
   return settings->value(QString("tool/sectionpoition10"));
}
void QMLSettings::set_setSection_position11(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition11", value);
   emit changed("tool/sectionpoition11");
}
QVariant QMLSettings::get_setSection_position11() {
   return settings->value(QString("tool/sectionpoition11"));
}
void QMLSettings::set_setSection_position12(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition12", value);
   emit changed("tool/sectionpoition12");
}
QVariant QMLSettings::get_setSection_position12() {
   return settings->value(QString("tool/sectionpoition12"));
}
void QMLSettings::set_setSection_position13(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition13", value);
   emit changed("tool/sectionpoition13");
}
QVariant QMLSettings::get_setSection_position13() {
   return settings->value(QString("tool/sectionpoition13"));
}
void QMLSettings::set_setSection_position14(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition14", value);
   emit changed("tool/sectionpoition14");
}
QVariant QMLSettings::get_setSection_position14() {
   return settings->value(QString("tool/sectionpoition14"));
}
void QMLSettings::set_setSection_position15(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition15", value);
   emit changed("tool/sectionpoition15");
}
QVariant QMLSettings::get_setSection_position15() {
   return settings->value(QString("tool/sectionpoition15"));
}
void QMLSettings::set_setSection_position16(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition16", value);
   emit changed("tool/sectionpoition16");
}
QVariant QMLSettings::get_setSection_position16() {
   return settings->value(QString("tool/sectionpoition16"));
}
void QMLSettings::set_setSection_position17(QVariant &value) {
   ((QSettings *)settings)->setValue("tool/sectionpoition17", value);
   emit changed("tool/sectionpoition17");
}
QVariant QMLSettings::get_setSection_position17() {
   return settings->value(QString("tool/sectionpoition17"));
}
void QMLSettings::set_purePursuitIntegralGainAB(double &value) {
   ((QSettings *)settings)->setValue("vehicle/purePursuitIntegralGainAB", value);
   emit changed("vehicle/purePursuitIntegralGainAB");
}
double QMLSettings::get_purePursuitIntegralGainAB() {
   return settings->value(QString("vehicle/purePursuitIntegralGainAB"));
}
void QMLSettings::set_set_youMoveDistance(double &value) {
   ((QSettings *)settings)->setValue("todo/youMoveDistance", value);
   emit changed("todo/youMoveDistance");
}
double QMLSettings::get_set_youMoveDistance() {
   return settings->value(QString("todo/youMoveDistance"));
}
void QMLSettings::set_setVehicle_antennaHeight(double &value) {
   ((QSettings *)settings)->setValue("vehicle/antennaHeight", value);
   emit changed("vehicle/antennaHeight");
}
double QMLSettings::get_setVehicle_antennaHeight() {
   return settings->value(QString("vehicle/antennaHeight"));
}
void QMLSettings::set_setVehicle_toolLookAheadOn(double &value) {
   ((QSettings *)settings)->setValue("tool/lookAheadOn", value);
   emit changed("tool/lookAheadOn");
}
double QMLSettings::get_setVehicle_toolLookAheadOn() {
   return settings->value(QString("tool/lookAheadOn"));
}
void QMLSettings::set_setTool_isToolTrailing(bool &value) {
   ((QSettings *)settings)->setValue("tool/isTrailing", value);
   emit changed("tool/isTrailing");
}
bool QMLSettings::get_setTool_isToolTrailing() {
   return settings->value(QString("tool/isTrailing"));
}
void QMLSettings::set_setVehicle_toolOffset(double &value) {
   ((QSettings *)settings)->setValue("tool/offset", value);
   emit changed("tool/offset");
}
double QMLSettings::get_setVehicle_toolOffset() {
   return settings->value(QString("tool/offset"));
}
void QMLSettings::set_setTool_isToolRearFixed(bool &value) {
   ((QSettings *)settings)->setValue("tool/rearFixed", value);
   emit changed("tool/rearFixed");
}
bool QMLSettings::get_setTool_isToolRearFixed() {
   return settings->value(QString("tool/rearFixed"));
}
void QMLSettings::set_setVehicle_antennaPivot(double &value) {
   ((QSettings *)settings)->setValue("vehicle/antennaPivot", value);
   emit changed("vehicle/antennaPivot");
}
double QMLSettings::get_setVehicle_antennaPivot() {
   return settings->value(QString("vehicle/antennaPivot"));
}
void QMLSettings::set_setVehicle_wheelbase(double &value) {
   ((QSettings *)settings)->setValue("vehicle/wheelbase", value);
   emit changed("vehicle/wheelbase");
}
double QMLSettings::get_setVehicle_wheelbase() {
   return settings->value(QString("vehicle/wheelbase"));
}
void QMLSettings::set_setVehicle_hitchLength(double &value) {
   ((QSettings *)settings)->setValue("vehicle/hitchLength", value);
   emit changed("vehicle/hitchLength");
}
double QMLSettings::get_setVehicle_hitchLength() {
   return settings->value(QString("vehicle/hitchLength"));
}
void QMLSettings::set_setVehicle_toolLookAheadOff(double &value) {
   ((QSettings *)settings)->setValue("tool/lookAheadOff", value);
   emit changed("tool/lookAheadOff");
}
double QMLSettings::get_setVehicle_toolLookAheadOff() {
   return settings->value(QString("tool/lookAheadOff"));
}
void QMLSettings::set_setVehicle_isPivotBehindAntenna(bool &value) {
   ((QSettings *)settings)->setValue("vehicle/isPivotBehindAntenna", value);
   emit changed("vehicle/isPivotBehindAntenna");
}
bool QMLSettings::get_setVehicle_isPivotBehindAntenna() {
   return settings->value(QString("vehicle/isPivotBehindAntenna"));
}
void QMLSettings::set_setVehicle_isSteerAxleAhead(bool &value) {
   ((QSettings *)settings)->setValue("vehicle/isSteerAxleAhead", value);
   emit changed("vehicle/isSteerAxleAhead");
}
bool QMLSettings::get_setVehicle_isSteerAxleAhead() {
   return settings->value(QString("vehicle/isSteerAxleAhead"));
}
void QMLSettings::set_setVehicle_vehicleName(QString &value) {
   ((QSettings *)settings)->setValue("vehicle/name", value);
   emit changed("vehicle/name");
}
QString QMLSettings::get_setVehicle_vehicleName() {
   return settings->value(QString("vehicle/name"));
}
void QMLSettings::set_setVehicle_slowSpeedCutoff(double &value) {
   ((QSettings *)settings)->setValue("vehicle/slowSpeedCutoff", value);
   emit changed("vehicle/slowSpeedCutoff");
}
double QMLSettings::get_setVehicle_slowSpeedCutoff() {
   return settings->value(QString("vehicle/slowSpeedCutoff"));
}
void QMLSettings::set_setVehicle_tankTrailingHitchLength(double &value) {
   ((QSettings *)settings)->setValue("tool/tankTrailingHitchLength", value);
   emit changed("tool/tankTrailingHitchLength");
}
double QMLSettings::get_setVehicle_tankTrailingHitchLength() {
   return settings->value(QString("tool/tankTrailingHitchLength"));
}
void QMLSettings::set_setVehicle_minCoverage(int &value) {
   ((QSettings *)settings)->setValue("vehicle/minCoverage", value);
   emit changed("vehicle/minCoverage");
}
int QMLSettings::get_setVehicle_minCoverage() {
   return settings->value(QString("vehicle/minCoverage"));
}
void QMLSettings::set_setVehicle_goalPointLookAhead(double &value) {
   ((QSettings *)settings)->setValue("vehicle/goalPointLookAhead", value);
   emit changed("vehicle/goalPointLookAhead");
}
double QMLSettings::get_setVehicle_goalPointLookAhead() {
   return settings->value(QString("vehicle/goalPointLookAhead"));
}
void QMLSettings::set_setVehicle_maxAngularVelocity(double &value) {
   ((QSettings *)settings)->setValue("vehicle/maxAngularVelocity", value);
   emit changed("vehicle/maxAngularVelocity");
}
double QMLSettings::get_setVehicle_maxAngularVelocity() {
   return settings->value(QString("vehicle/maxAngularVelocity"));
}
void QMLSettings::set_setVehicle_maxSteerAngle(double &value) {
   ((QSettings *)settings)->setValue("vehicle/maxSteerAngle", value);
   emit changed("vehicle/maxSteerAngle");
}
double QMLSettings::get_setVehicle_maxSteerAngle() {
   return settings->value(QString("vehicle/maxSteerAngle"));
}
void QMLSettings::set_set_youTurnExtensionLength(int &value) {
   ((QSettings *)settings)->setValue("uturn/extensionLength", value);
   emit changed("uturn/extensionLength");
}
int QMLSettings::get_set_youTurnExtensionLength() {
   return settings->value(QString("uturn/extensionLength"));
}
void QMLSettings::set_set_youToolWidths(double &value) {
   ((QSettings *)settings)->setValue("yturn/toolWidths", value);
   emit changed("yturn/toolWidths");
}
double QMLSettings::get_set_youToolWidths() {
   return settings->value(QString("yturn/toolWidths"));
}
void QMLSettings::set_setVehicle_minTurningRadius(double &value) {
   ((QSettings *)settings)->setValue("vehicle/minTurningRadius", value);
   emit changed("vehicle/minTurningRadius");
}
double QMLSettings::get_setVehicle_minTurningRadius() {
   return settings->value(QString("vehicle/minTurningRadius"));
}
void QMLSettings::set_setVehicle_antennaOffset(double &value) {
   ((QSettings *)settings)->setValue("vehicle/antennaOffset", value);
   emit changed("vehicle/antennaOffset");
}
double QMLSettings::get_setVehicle_antennaOffset() {
   return settings->value(QString("vehicle/antennaOffset"));
}
void QMLSettings::set_set_youTurnDistanceFromBoundary(double &value) {
   ((QSettings *)settings)->setValue("uturn/distanceFromBoundary", value);
   emit changed("uturn/distanceFromBoundary");
}
double QMLSettings::get_set_youTurnDistanceFromBoundary() {
   return settings->value(QString("uturn/distanceFromBoundary"));
}
void QMLSettings::set_setVehicle_lookAheadMinimum(double &value) {
   ((QSettings *)settings)->setValue("vehicle/lookAheadMinimum", value);
   emit changed("vehicle/lookAheadMinimum");
}
double QMLSettings::get_setVehicle_lookAheadMinimum() {
   return settings->value(QString("vehicle/lookAheadMinimum"));
}
void QMLSettings::set_setVehicle_goalPointLookAheadMult(double &value) {
   ((QSettings *)settings)->setValue("vehicle/goalPointLookAheadMult", value);
   emit changed("vehicle/goalPointLookAheadMult");
}
double QMLSettings::get_setVehicle_goalPointLookAheadMult() {
   return settings->value(QString("vehicle/goalPointLookAheadMult"));
}
void QMLSettings::set_stanleyDistanceErrorGain(double &value) {
   ((QSettings *)settings)->setValue("vehicle/stanleyDistanceErrorGain", value);
   emit changed("vehicle/stanleyDistanceErrorGain");
}
double QMLSettings::get_stanleyDistanceErrorGain() {
   return settings->value(QString("vehicle/stanleyDistanceErrorGain"));
}
void QMLSettings::set_stanleyHeadingErrorGain(double &value) {
   ((QSettings *)settings)->setValue("vehicle/stanleyHeadingErrorGain", value);
   emit changed("vehicle/stanleyHeadingErrorGain");
}
double QMLSettings::get_stanleyHeadingErrorGain() {
   return settings->value(QString("vehicle/stanleyHeadingErrorGain"));
}
void QMLSettings::set_setVehicle_isStanleyUsed(bool &value) {
   ((QSettings *)settings)->setValue("vehicle/isStanlyUsed", value);
   emit changed("vehicle/isStanlyUsed");
}
bool QMLSettings::get_setVehicle_isStanleyUsed() {
   return settings->value(QString("vehicle/isStanlyUsed"));
}
void QMLSettings::set_setTram_BasedOn(int &value) {
   ((QSettings *)settings)->setValue("tram/basedOn", value);
   emit changed("tram/basedOn");
}
int QMLSettings::get_setTram_BasedOn() {
   return settings->value(QString("tram/basedOn"));
}
void QMLSettings::set_setTram_Skips(int &value) {
   ((QSettings *)settings)->setValue("tram/skips", value);
   emit changed("tram/skips");
}
int QMLSettings::get_setTram_Skips() {
   return settings->value(QString("tram/skips"));
}
void QMLSettings::set_setTool_isToolTBT(bool &value) {
   ((QSettings *)settings)->setValue("tool/isTBT", value);
   emit changed("tool/isTBT");
}
bool QMLSettings::get_setTool_isToolTBT() {
   return settings->value(QString("tool/isTBT"));
}
void QMLSettings::set_setVehicle_vehicleType(int &value) {
   ((QSettings *)settings)->setValue("vehicle/type", value);
   emit changed("vehicle/type");
}
int QMLSettings::get_setVehicle_vehicleType() {
   return settings->value(QString("vehicle/type"));
}
void QMLSettings::set_set_youSkipWidth(int &value) {
   ((QSettings *)settings)->setValue("uturn/skipWidth", value);
   emit changed("uturn/skipWidth");
}
int QMLSettings::get_set_youSkipWidth() {
   return settings->value(QString("uturn/skipWidth"));
}
void QMLSettings::set_setArdSteer_setting1(char &value) {
   ((QSettings *)settings)->setValue("autosteer/ardSteerSetting1", value);
   emit changed("autosteer/ardSteerSetting1");
}
char QMLSettings::get_setArdSteer_setting1() {
   return settings->value(QString("autosteer/ardSteerSetting1"));
}
void QMLSettings::set_setArdSteer_minSpeed(char &value) {
   ((QSettings *)settings)->setValue("autosteer/ardSteerMinSpeed", value);
   emit changed("autosteer/ardSteerMinSpeed");
}
char QMLSettings::get_setArdSteer_minSpeed() {
   return settings->value(QString("autosteer/ardSteerMinSpeed"));
}
void QMLSettings::set_setArdSteer_maxSpeed(char &value) {
   ((QSettings *)settings)->setValue("autosteer/ardSteerMaxSpeed", value);
   emit changed("autosteer/ardSteerMaxSpeed");
}
char QMLSettings::get_setArdSteer_maxSpeed() {
   return settings->value(QString("autosteer/ardSteerMaxSpeed"));
}
void QMLSettings::set_setArdSteer_setting0(char &value) {
   ((QSettings *)settings)->setValue("autosteer/ardSteerSetting0", value);
   emit changed("autosteer/ardSteerSetting0");
}
char QMLSettings::get_setArdSteer_setting0() {
   return settings->value(QString("autosteer/ardSteerSetting0"));
}
void QMLSettings::set_setVehicle_hydraulicLiftLookAhead(double &value) {
   ((QSettings *)settings)->setValue("vehicle/hydraulicLiftLookAhead", value);
   emit changed("vehicle/hydraulicLiftLookAhead");
}
double QMLSettings::get_setVehicle_hydraulicLiftLookAhead() {
   return settings->value(QString("vehicle/hydraulicLiftLookAhead"));
}
void QMLSettings::set_setVehicle_isMachineControlToAutoSteer(bool &value) {
   ((QSettings *)settings)->setValue("vehicle/isMachineControlToAutoSteer", value);
   emit changed("vehicle/isMachineControlToAutoSteer");
}
bool QMLSettings::get_setVehicle_isMachineControlToAutoSteer() {
   return settings->value(QString("vehicle/isMachineControlToAutoSteer"));
}
void QMLSettings::set_setArdSteer_maxPulseCounts(char &value) {
   ((QSettings *)settings)->setValue("autosteer/ardSteerMaxPulseCounts", value);
   emit changed("autosteer/ardSteerMaxPulseCounts");
}
char QMLSettings::get_setArdSteer_maxPulseCounts() {
   return settings->value(QString("autosteer/ardSteerMaxPulseCounts"));
}
void QMLSettings::set_setArdMac_hydRaiseTime(char &value) {
   ((QSettings *)settings)->setValue("todo/ardMacHydRaiseTime", value);
   emit changed("todo/ardMacHydRaiseTime");
}
char QMLSettings::get_setArdMac_hydRaiseTime() {
   return settings->value(QString("todo/ardMacHydRaiseTime"));
}
void QMLSettings::set_setArdMac_hydLowerTime(char &value) {
   ((QSettings *)settings)->setValue("todo/ardMacHydLowerTime", value);
   emit changed("todo/ardMacHydLowerTime");
}
char QMLSettings::get_setArdMac_hydLowerTime() {
   return settings->value(QString("todo/ardMacHydLowerTime"));
}
void QMLSettings::set_setArdMac_isHydEnabled(char &value) {
   ((QSettings *)settings)->setValue("todo/ardMacIsHydEnabled", value);
   emit changed("todo/ardMacIsHydEnabled");
}
char QMLSettings::get_setArdMac_isHydEnabled() {
   return settings->value(QString("todo/ardMacIsHydEnabled"));
}
void QMLSettings::set_setTool_defaultSectionWidth(double &value) {
   ((QSettings *)settings)->setValue("tool/defaultSectionWidth", value);
   emit changed("tool/defaultSectionWidth");
}
double QMLSettings::get_setTool_defaultSectionWidth() {
   return settings->value(QString("tool/defaultSectionWidth"));
}
void QMLSettings::set_setVehicle_toolOffDelay(double &value) {
   ((QSettings *)settings)->setValue("tool/offDelay", value);
   emit changed("tool/offDelay");
}
double QMLSettings::get_setVehicle_toolOffDelay() {
   return settings->value(QString("tool/offDelay"));
}
void QMLSettings::set_setArdMac_setting0(char &value) {
   ((QSettings *)settings)->setValue("todo/ardMacSetting0", value);
   emit changed("todo/ardMacSetting0");
}
char QMLSettings::get_setArdMac_setting0() {
   return settings->value(QString("todo/ardMacSetting0"));
}
void QMLSettings::set_setArdSteer_setting2(char &value) {
   ((QSettings *)settings)->setValue("todo/ArdSteerSetting2", value);
   emit changed("todo/ArdSteerSetting2");
}
char QMLSettings::get_setArdSteer_setting2() {
   return settings->value(QString("todo/ArdSteerSetting2"));
}
void QMLSettings::set_stanleyIntegralDistanceAwayTriggerAB(double &value) {
   ((QSettings *)settings)->setValue("vehicle/stanleyIntegralDistanceAwayTriggerAB", value);
   emit changed("vehicle/stanleyIntegralDistanceAwayTriggerAB");
}
double QMLSettings::get_stanleyIntegralDistanceAwayTriggerAB() {
   return settings->value(QString("vehicle/stanleyIntegralDistanceAwayTriggerAB"));
}
void QMLSettings::set_setTool_isToolFront(bool &value) {
   ((QSettings *)settings)->setValue("tool/isFront", value);
   emit changed("tool/isFront");
}
bool QMLSettings::get_setTool_isToolFront() {
   return settings->value(QString("tool/isFront"));
}
void QMLSettings::set_setVehicle_trackWidth(double &value) {
   ((QSettings *)settings)->setValue("vehicle/trackWidth", value);
   emit changed("vehicle/trackWidth");
}
double QMLSettings::get_setVehicle_trackWidth() {
   return settings->value(QString("vehicle/trackWidth"));
}
void QMLSettings::set_setArdMac_isDanfoss(bool &value) {
   ((QSettings *)settings)->setValue("todo/ardMacIsDanFoss", value);
   emit changed("todo/ardMacIsDanFoss");
}
bool QMLSettings::get_setArdMac_isDanfoss() {
   return settings->value(QString("todo/ardMacIsDanFoss"));
}
void QMLSettings::set_stanleyIntegralGainAB(double &value) {
   ((QSettings *)settings)->setValue("vehicle/stanleyIntegralGainAB", value);
   emit changed("vehicle/stanleyIntegralGainAB");
}
double QMLSettings::get_stanleyIntegralGainAB() {
   return settings->value(QString("vehicle/stanleyIntegralGainAB"));
}
void QMLSettings::set_setSection_isFast(bool &value) {
   ((QSettings *)settings)->setValue("tool/sectionIsFast", value);
   emit changed("tool/sectionIsFast");
}
bool QMLSettings::get_setSection_isFast() {
   return settings->value(QString("tool/sectionIsFast"));
}
void QMLSettings::set_setArdMac_user1(char &value) {
   ((QSettings *)settings)->setValue("todo/ardMacUser1", value);
   emit changed("todo/ardMacUser1");
}
char QMLSettings::get_setArdMac_user1() {
   return settings->value(QString("todo/ardMacUser1"));
}
void QMLSettings::set_setArdMac_user2(char &value) {
   ((QSettings *)settings)->setValue("todo/ardMacUser2", value);
   emit changed("todo/ardMacUser2");
}
char QMLSettings::get_setArdMac_user2() {
   return settings->value(QString("todo/ardMacUser2"));
}
void QMLSettings::set_setArdMac_user3(char &value) {
   ((QSettings *)settings)->setValue("todo/ardMacUser3", value);
   emit changed("todo/ardMacUser3");
}
char QMLSettings::get_setArdMac_user3() {
   return settings->value(QString("todo/ardMacUser3"));
}
void QMLSettings::set_setArdMac_user4(char &value) {
   ((QSettings *)settings)->setValue("todo/ardMacUser4", value);
   emit changed("todo/ardMacUser4");
}
char QMLSettings::get_setArdMac_user4() {
   return settings->value(QString("todo/ardMacUser4"));
}
void QMLSettings::set_setVehicle_panicStopSpeed(double &value) {
   ((QSettings *)settings)->setValue("vehicle/panicStopSpeed", value);
   emit changed("vehicle/panicStopSpeed");
}
double QMLSettings::get_setVehicle_panicStopSpeed() {
   return settings->value(QString("vehicle/panicStopSpeed"));
}
void QMLSettings::set_setAS_ModeMultiplierStanley(double &value) {
   ((QSettings *)settings)->setValue("autosteer/modeMultiplierStanley", value);
   emit changed("autosteer/modeMultiplierStanley");
}
double QMLSettings::get_setAS_ModeMultiplierStanley() {
   return settings->value(QString("autosteer/modeMultiplierStanley"));
}
void QMLSettings::set_setDisplay_brightness(int &value) {
   ((QSettings *)settings)->setValue("display/brightness", value);
   emit changed("display/brightness");
}
int QMLSettings::get_setDisplay_brightness() {
   return settings->value(QString("display/brightness"));
}
void QMLSettings::set_set_youTurnRadius(double &value) {
   ((QSettings *)settings)->setValue("uturn/radius", value);
   emit changed("uturn/radius");
}
double QMLSettings::get_set_youTurnRadius() {
   return settings->value(QString("uturn/radius"));
}
void QMLSettings::set_setDisplay_brightnessSystem(int &value) {
   ((QSettings *)settings)->setValue("display/brightnessSystem", value);
   emit changed("display/brightnessSystem");
}
int QMLSettings::get_setDisplay_brightnessSystem() {
   return settings->value(QString("display/brightnessSystem"));
}
void QMLSettings::set_setTool_isSectionsNotZones(bool &value) {
   ((QSettings *)settings)->setValue("tool/sectionsNotZones", value);
   emit changed("tool/sectionsNotZones");
}
bool QMLSettings::get_setTool_isSectionsNotZones() {
   return settings->value(QString("tool/sectionsNotZones"));
}
void QMLSettings::set_setTool_numSectionsMulti(int &value) {
   ((QSettings *)settings)->setValue("tool/numSectionsMulti", value);
   emit changed("tool/numSectionsMulti");
}
int QMLSettings::get_setTool_numSectionsMulti() {
   return settings->value(QString("tool/numSectionsMulti"));
}
void QMLSettings::set_setTool_zones(QVector<int> &value) {
   ((QSettings *)settings)->setValue("tool/zones", value);
   emit changed("tool/zones");
}
QVector<int> QMLSettings::get_setTool_zones() {
   return settings->value(QString("tool/zones"));
}
void QMLSettings::set_setTool_sectionWidthMulti(double &value) {
   ((QSettings *)settings)->setValue("tool/sectionWidthMulti", value);
   emit changed("tool/sectionWidthMulti");
}
double QMLSettings::get_setTool_sectionWidthMulti() {
   return settings->value(QString("tool/sectionWidthMulti"));
}
void QMLSettings::set_setDisplay_isBrightnessOn(bool &value) {
   ((QSettings *)settings)->setValue("display/brightnessOn", value);
   emit changed("display/brightnessOn");
}
bool QMLSettings::get_setDisplay_isBrightnessOn() {
   return settings->value(QString("display/brightnessOn"));
}
void QMLSettings::set_setKey_hotkeys(QString &value) {
   ((QSettings *)settings)->setValue("display/hotKeys", value);
   emit changed("display/hotKeys");
}
QString QMLSettings::get_setKey_hotkeys() {
   return settings->value(QString("display/hotKeys"));
}
void QMLSettings::set_setVehicle_goalPointLookAheadHold(double &value) {
   ((QSettings *)settings)->setValue("vehicle/goalPointLookAheadHold", value);
   emit changed("vehicle/goalPointLookAheadHold");
}
double QMLSettings::get_setVehicle_goalPointLookAheadHold() {
   return settings->value(QString("vehicle/goalPointLookAheadHold"));
}
void QMLSettings::set_setTool_isSectionOffWhenOut(bool &value) {
   ((QSettings *)settings)->setValue("tool/isSectionOffWhenOut", value);
   emit changed("tool/isSectionOffWhenOut");
}
bool QMLSettings::get_setTool_isSectionOffWhenOut() {
   return settings->value(QString("tool/isSectionOffWhenOut"));
}
void QMLSettings::set_set_uTurnStyle(int &value) {
   ((QSettings *)settings)->setValue("uturn/style", value);
   emit changed("uturn/style");
}
int QMLSettings::get_set_uTurnStyle() {
   return settings->value(QString("uturn/style"));
}
void QMLSettings::set_setGPS_minimumStepLimit(double &value) {
   ((QSettings *)settings)->setValue("gps/minimumStepLimit", value);
   emit changed("gps/minimumStepLimit");
}
double QMLSettings::get_setGPS_minimumStepLimit() {
   return settings->value(QString("gps/minimumStepLimit"));
}
void QMLSettings::set_setAS_isSteerInReverse(bool &value) {
   ((QSettings *)settings)->setValue("autosteer/isSteerInReverse", value);
   emit changed("autosteer/isSteerInReverse");
}
bool QMLSettings::get_setAS_isSteerInReverse() {
   return settings->value(QString("autosteer/isSteerInReverse"));
}
void QMLSettings::set_setAS_functionSpeedLimit(double &value) {
   ((QSettings *)settings)->setValue("autosteer/functionSpeedLimit", value);
   emit changed("autosteer/functionSpeedLimit");
}
double QMLSettings::get_setAS_functionSpeedLimit() {
   return settings->value(QString("autosteer/functionSpeedLimit"));
}
void QMLSettings::set_setAS_maxSteerSpeed(double &value) {
   ((QSettings *)settings)->setValue("autosteer/maxSteerSpeed", value);
   emit changed("autosteer/maxSteerSpeed");
}
double QMLSettings::get_setAS_maxSteerSpeed() {
   return settings->value(QString("autosteer/maxSteerSpeed"));
}
void QMLSettings::set_setAS_minSteerSpeed(double &value) {
   ((QSettings *)settings)->setValue("autosteer/minSteerSpeed", value);
   emit changed("autosteer/minSteerSpeed");
}
double QMLSettings::get_setAS_minSteerSpeed() {
   return settings->value(QString("autosteer/minSteerSpeed"));
}
void QMLSettings::set_setBrand_HBrand(QString &value) {
   ((QSettings *)settings)->setValue("display/HBrand", value);
   emit changed("display/HBrand");
}
QString QMLSettings::get_setBrand_HBrand() {
   return settings->value(QString("display/HBrand"));
}
void QMLSettings::set_setBrand_WDBrand(QString &value) {
   ((QSettings *)settings)->setValue("display/WDBrand", value);
   emit changed("display/WDBrand");
}
QString QMLSettings::get_setBrand_WDBrand() {
   return settings->value(QString("display/WDBrand"));
}
void QMLSettings::set_setIMU_fusionWeight2(double &value) {
   ((QSettings *)settings)->setValue("gps/IMUFusionWeight2", value);
   emit changed("gps/IMUFusionWeight2");
}
double QMLSettings::get_setIMU_fusionWeight2() {
   return settings->value(QString("gps/IMUFusionWeight2"));
}
void QMLSettings::set_setDisplay_isSvennArrowOn(bool &value) {
   ((QSettings *)settings)->setValue("display/svennArrow", value);
   emit changed("display/svennArrow");
}
bool QMLSettings::get_setDisplay_isSvennArrowOn() {
   return settings->value(QString("display/svennArrow"));
}
void QMLSettings::set_setTool_isTramOuterInverted(bool &value) {
   ((QSettings *)settings)->setValue("tool/isTramOuterInverted", value);
   emit changed("tool/isTramOuterInverted");
}
bool QMLSettings::get_setTool_isTramOuterInverted() {
   return settings->value(QString("tool/isTramOuterInverted"));
}
void QMLSettings::set_setJobMenu_location(QPoint &value) {
   ((QSettings *)settings)->setValue("display/jobMenuLocation", value);
   emit changed("display/jobMenuLocation");
}
QPoint QMLSettings::get_setJobMenu_location() {
   return settings->value(QString("display/jobMenuLocation"));
}
void QMLSettings::set_setJobMenu_size(QVariant &value) {
   ((QSettings *)settings)->setValue("display/jobMenuSize", value);
   emit changed("display/jobMenuSize");
}
QVariant QMLSettings::get_setJobMenu_size() {
   return settings->value(QString("display/jobMenuSize"));
}
void QMLSettings::set_setWindow_curveEditLocation(QPoint &value) {
   ((QSettings *)settings)->setValue("display/curveEditLocation", value);
   emit changed("display/curveEditLocation");
}
QPoint QMLSettings::get_setWindow_curveEditLocation() {
   return settings->value(QString("display/curveEditLocation"));
}
void QMLSettings::set_setWindow_abLineEditLocation(QPoint &value) {
   ((QSettings *)settings)->setValue("display/abLineEditLocation", value);
   emit changed("display/abLineEditLocation");
}
QPoint QMLSettings::get_setWindow_abLineEditLocation() {
   return settings->value(QString("display/abLineEditLocation"));
}
void QMLSettings::set_setWindow_steerSettingsLocation(QPoint &value) {
   ((QSettings *)settings)->setValue("display/steerSettingsLocation", value);
   emit changed("display/steerSettingsLocation");
}
QPoint QMLSettings::get_setWindow_steerSettingsLocation() {
   return settings->value(QString("display/steerSettingsLocation"));
}
void QMLSettings::set_setWindow_abCurveCreate(QPoint &value) {
   ((QSettings *)settings)->setValue("display/ABCurveCreate", value);
   emit changed("display/ABCurveCreate");
}
QPoint QMLSettings::get_setWindow_abCurveCreate() {
   return settings->value(QString("display/ABCurveCreate"));
}
void QMLSettings::set_setWindow_abLineCreate(QPoint &value) {
   ((QSettings *)settings)->setValue("display/ABLineCreate", value);
   emit changed("display/ABLineCreate");
}
QPoint QMLSettings::get_setWindow_abLineCreate() {
   return settings->value(QString("display/ABLineCreate"));
}
void QMLSettings::set_setTool_trailingToolToPivotLength(double &value) {
   ((QSettings *)settings)->setValue("tool/trailingToPivotLength", value);
   emit changed("tool/trailingToPivotLength");
}
double QMLSettings::get_setTool_trailingToolToPivotLength() {
   return settings->value(QString("tool/trailingToPivotLength"));
}
